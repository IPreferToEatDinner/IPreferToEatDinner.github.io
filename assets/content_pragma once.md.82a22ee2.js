import{_ as a,o as e,c as o,U as n}from"./chunks/framework.76b79cb5.js";const C=JSON.parse('{"title":"pragma once","description":"","frontmatter":{},"headers":[],"relativePath":"content/pragma once.md","filePath":"content/pragma once.md","lastUpdated":1685003054000}'),c={name:"content/pragma once.md"},s=n(`<h1 id="pragma-once" tabindex="-1">pragma once <a class="header-anchor" href="#pragma-once" aria-label="Permalink to &quot;pragma once&quot;">​</a></h1><p>在 C/C++ 中，在使用预编译指令<code>#include</code>的时候，为了防止重复引用造成二义性，通常有两种方式</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你也可以完全不考虑二义性，仅仅凭借自己智慧的大脑和严谨的逻辑链保证你的引用是完全唯一的</p></div><p>第一种是<code>#ifndef</code>指令防止代码块重复引用，比如说</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_CODE_BLOCK</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_CODE_BLOCK</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// code</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span><span style="color:#676E95;font-style:italic;"> // _CODE_BLOCK</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意，<code>_CODE_BLOCK</code>应是一个独一无二的宏名，否则会有编译错误</p></div><h2 id="ifndef" tabindex="-1">ifndef <a class="header-anchor" href="#ifndef" aria-label="Permalink to &quot;ifndef&quot;">​</a></h2><p><code>#ifndef</code>方式是 C/C++ 语言的标准支持，也是比较常用的方式，<code>#ifndef</code>的方式依赖于自定义的宏名（例中的<code>_CODE_BLOCK</code>）不能冲突，它不光可以保证同一份文件不会被包含两次，也能够保证<em>不同文件完全相同的内容</em>不会被包含两次。</p><p>但同样的，如果自定义的宏名不小心“重名”了，两份不同的文件使用同一个宏名进行<code>#ifndef</code>，那么会导致编译器找不到声明的情况（被编译器判定为重定义而屏蔽了）。</p><p>此外，由于编译器每次都需要打开头文件才能判定是否有重复定义，因此在编译大型项目时，<code>#ifndef</code>会使得编译时间相对较长，因此一些编译器逐渐开始支持<code>#pragma once</code>的方式（Visual Studio 2017新建头文件会自带<code>#pragma once</code>指令）。</p><p>第二种就是<code>#pragma once</code>指令，在想要保护的文件开头写入</p><h2 id="pragma-once-1" tabindex="-1">pragma once <a class="header-anchor" href="#pragma-once-1" aria-label="Permalink to &quot;pragma once&quot;">​</a></h2><p><code>#pragma once</code>一般由编译器提供保证：同一个文件不会被包含多次。</p><p>这里所说的&quot;同一个文件&quot;是指物理上的一个文件，而不是指内容相同的两个文件。无法对一个头文件中的一段代码作<code>#pragma once</code>声明，而只能针对文件。</p><p>此方式不会出现宏名碰撞引发的奇怪问题，大型项目的编译速度也因此提供了一些。缺点是如果某个头文件有多份拷贝，此方法不能保证它们不被重复包含。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在C/C++中，<code>#pragma once</code>是一个非标准但是被广泛支持的方式。</p></div><h2 id="相互关系" tabindex="-1">相互关系 <a class="header-anchor" href="#相互关系" aria-label="Permalink to &quot;相互关系&quot;">​</a></h2><p><code>#pragma once</code>方式产生于<code>#ifndef</code>之后。</p><p><code>#ifndef</code>方式受 C/C++ 语言标准的支持，不受编译器的任何限制；而<code>#pragma once</code>方式有些编译器不支持(较老编译器不支持，如GCC 3.4版本之前不支持<code>#pragma once</code>)，兼容性不够好。</p><p><code>#ifndef</code>可以针对一个文件中的部分代码，而<code>#pragma once</code>只能针对整个文件。</p><p>相对而言，<code>#ifndef</code>更加灵活，兼容性好，<code>#pragma once</code>操作简单，效率高。</p><h2 id="推荐操作" tabindex="-1">推荐操作 <a class="header-anchor" href="#推荐操作" aria-label="Permalink to &quot;推荐操作&quot;">​</a></h2><p>为了在各个编译环境都能做到成功编译，可以将两个放在一起，如</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">once</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_CODE_BLOCK</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_CODE_BLOCK</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// code</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span><span style="color:#676E95;font-style:italic;"> // _CODE_BLOCK</span></span></code></pre></div><p>这样是良好的编程习惯，可以提高编译速度同时也可以防止不兼容</p>`,25),p=[s];function t(l,d,i,r,f,m){return e(),o("div",null,p)}const h=a(c,[["render",t]]);export{C as __pageData,h as default};
