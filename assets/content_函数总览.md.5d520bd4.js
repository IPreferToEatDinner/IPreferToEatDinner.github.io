import{_ as s,o as a,c as n,O as l}from"./chunks/framework.4afe7240.js";const F=JSON.parse('{"title":"函数总览","description":"","frontmatter":{},"headers":[],"relativePath":"content/函数总览.md","filePath":"content/函数总览.md","lastUpdated":1685003054000}'),p={name:"content/函数总览.md"},o=l(`<h1 id="函数总览" tabindex="-1">函数总览 <a class="header-anchor" href="#函数总览" aria-label="Permalink to &quot;函数总览&quot;">​</a></h1><p>函数是一组一起执行一个任务的语句。</p><p>每个 C++ 程序都至少有一个函数，即主函数 <code>main()</code> ，所有简单的程序都可以定义其他额外的函数。</p><p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><p><em>函数声明</em> 告诉编译器函数的名称、返回类型和参数。<em>函数定义</em> 提供了函数的实际主体。</p><p>C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 <code>strcat()</code> 用来连接两个字符串，函数 <code>memcpy()</code> 用来复制内存到另一个位置。</p><p>函数还有很多叫法，比如方法、子例程或程序，等等</p><h2 id="定义函数" tabindex="-1">定义函数 <a class="header-anchor" href="#定义函数" aria-label="Permalink to &quot;定义函数&quot;">​</a></h2><p>C++ 中的函数定义的一般形式如下</p><div class="language-Cpp"><button title="Copy Code" class="copy"></button><span class="lang">Cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">return_type</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function_name</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">parameter</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        body of the function </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><table><thead><tr><th style="text-align:center;">组成部分</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">返回类型</td><td style="text-align:center;">一个函数可以返回一个值。<code>return_type</code> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，<code>return_type</code> 是关键字 <code>void</code></td></tr><tr><td style="text-align:center;">函数名称</td><td style="text-align:center;">这是函数的实际名称。函数名和参数列表一起构成了函数签名。</td></tr><tr><td style="text-align:center;">参数</td><td style="text-align:center;">参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数</td></tr><tr><td style="text-align:center;">函数主体</td><td style="text-align:center;">函数主体包含一组定义函数执行任务的语句</td></tr></tbody></table><p>以下是 <code>max()</code> 函数的源代码。该函数有两个参数 <code>num1</code> 和 <code>num2</code>，会返回这两个数中较大的那个数：</p><div class="language-Cpp"><button title="Copy Code" class="copy"></button><span class="lang">Cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数返回两个数中较大的那个数 </span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h2><p>函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数声明包括以下几个部分：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">return_type</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">function_name</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">parameter</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>针对上面定义的函数 max()，以下是函数声明：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num2</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><p>但是如果想不写函数声明直接调用函数，那么就可以把函数本体写在调用之前，那也相当于进行了一次函数声明</p><h2 id="调用函数" tabindex="-1">调用函数 <a class="header-anchor" href="#调用函数" aria-label="Permalink to &quot;调用函数&quot;">​</a></h2><p>创建 C++ 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p><p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p><p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数声明</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num2</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 局部变量声明 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ret</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 调用函数来获取最大值 </span></span>
<span class="line"><span style="color:#A6ACCD;">    ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max value is : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> ret </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数返回两个数中较大的那个数 </span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>把 <code>max()</code> 函数和 <code>main()</code> 函数放一块，编译源代码。</p><p>当运行最后的可执行文件时，会产生下列结果：<code>Max value is : 200</code></p><h2 id="函数参数" tabindex="-1">函数参数 <a class="header-anchor" href="#函数参数" aria-label="Permalink to &quot;函数参数&quot;">​</a></h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。</p><p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有三种向函数传递参数的方式：</p><table><thead><tr><th style="text-align:center;">调用类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">传值调用</td><td style="text-align:center;">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响</td></tr><tr><td style="text-align:center;">指针调用</td><td style="text-align:center;">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数,这意味着，修改形式参数会影响实际参数</td></tr><tr><td style="text-align:center;">引用调用</td><td style="text-align:center;">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数</td></tr></tbody></table><p>默认情况下，C++ 使用传值调用来传递参数</p><p>一般来说，这意味着函数内的代码不能改变用于调用函数的参数。</p><p>之前提到的实例，调用 <code>max()</code> 函数时，使用了相同的方法。</p><h2 id="参数的默认值" tabindex="-1">参数的默认值 <a class="header-anchor" href="#参数的默认值" aria-label="Permalink to &quot;参数的默认值&quot;">​</a></h2><p>当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。</p><p>当调用函数时，如果实际参数的值留空，则使用这个默认值。</p><p>这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。</p><p>请看下面的实例</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 局部变量声明 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 调用函数来添加值 </span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Total value is :</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 再次调用函数 </span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Total value is :</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="lambda-函数" tabindex="-1">Lambda 函数 <a class="header-anchor" href="#lambda-函数" aria-label="Permalink to &quot;Lambda 函数&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这个知识点比较高级，所以可以先纵览一下，然后去看下一章</p></div><p><code>Lambda</code>表达式也叫匿名函数，C++11 提供了对匿名函数的支持,称为 <code>Lambda</code> 函数。</p><p><code>Lambda</code> 表达式把函数看作对象。</p><p><code>Lambda</code> 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。这是函数式编程的重要基础</p><p><code>Lambda</code> 表达式本质上与函数声明非常类似。</p><p><code>Lambda</code> 表达式具体形式如下:</p><ul><li>有返回值</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;font-style:italic;">capture</span><span style="color:#89DDFF;">](</span><span style="color:#FFCB6B;">parameters</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">return-type{body}</span></span></code></pre></div><p>例如</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[](</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在一个更为复杂的例子中，返回类型可以被明确的指定如下</span></span>
<span class="line"><span style="color:#89DDFF;">[](</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> z </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 本例中，一个临时的参数 z 被创建用来存储中间结果，就如同普通函数，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   z 的值不会保留到下一次该不具名函数再次被调用时。*/</span></span></code></pre></div><p>如果没有返回值可以表示为</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;font-style:italic;">capture</span><span style="color:#89DDFF;">](</span><span style="color:#FFCB6B;">parameters</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>例如</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[]{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">global_x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果 lambda 函数没有传回值（例如 <code>void</code> ），其返回类型可被完全忽略。</p><p>在 Lambda 表达式内可以访问当前作用域的变量，这是 Lambda 表达式的闭包（ Closure ）行为。</p><p>与 JavaScript 闭包不同，C++ 变量传递有传值和传引用的区别。</p><p>可以通过前面的<code>[]</code>来指定：</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">[]</span><span style="color:#676E95;font-style:italic;"> // 没有有定义任何变量。使用未定义变量会引发错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"> // x以传值方式传入（默认），y以引用方式传入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[&amp;]</span><span style="color:#676E95;font-style:italic;"> // 任何被使用到的外部变量都隐式地以引用方式加以引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[=]</span><span style="color:#676E95;font-style:italic;"> // 任何被使用到的外部变量都隐式地以传值方式加以引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[&amp;,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"> // x显式地以传值方式加以引用。其余变量以引用方式加以引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[=,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"> // z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span></span></code></pre></div><p>另外有一点需要注意。</p><p>对于<code>[=]</code>或<code>[&amp;]</code>的形式，lambda 表达式可以直接使用 <code>this</code> 指针。但是，对于<code>[]</code>的形式，如果要使用 <code>this</code> 指针，必须显式传入</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[this]()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this-&gt;</span><span style="color:#82AAFF;">someFunc</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}();</span></span></code></pre></div>`,68),t=[o];function e(c,r,y,D,C,A){return a(),n("div",null,t)}const d=s(p,[["render",e]]);export{F as __pageData,d as default};
