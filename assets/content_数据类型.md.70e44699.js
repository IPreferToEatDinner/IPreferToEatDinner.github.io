import{_ as t,o as e,c as s,U as n}from"./chunks/framework.76b79cb5.js";const C=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"content/数据类型.md","filePath":"content/数据类型.md","lastUpdated":1684297294000}'),l={name:"content/数据类型.md"},a=n(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><p>使用编程语言进行编程时，需要用到各种变量来存储各种信息。</p><p>变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内存中保留一些空间。</p><p>您可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。</p><p>在这里讲一句较为本质的提示，计算机中实际并没有<code>int float double char</code>之分，计算机只有 0 1 的电子状态，我们定义的变量会放在内存或是其他地方，其本质状态仍然是 010101000101 这样的数据，而数据类型只是这些数据读取的方式，比如<code>int</code>对 0101010101 的读取方式遵循二进制向十进制的转换方式，但是如果我们以<code>float</code>方式去读取这串数据，得到的结果很大程度上将会完全不同，而这也是后面你可能会遇见的类型转换所遵循的基本机理</p><h2 id="基本内置类型" tabindex="-1">基本内置类型 <a class="header-anchor" href="#基本内置类型" aria-label="Permalink to &quot;基本内置类型&quot;">​</a></h2><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。</p><p>下表列出了七种基本的 C++ 数据类型：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">关键字</th></tr></thead><tbody><tr><td style="text-align:center;">布尔型</td><td style="text-align:center;">bool</td></tr><tr><td style="text-align:center;">字符型</td><td style="text-align:center;">char</td></tr><tr><td style="text-align:center;">整型</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">浮点型</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">双浮点型</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">无类型</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">宽字符型</td><td style="text-align:center;">wchar_t</td></tr></tbody></table><p>其实 <code>wchar_t</code> 是这样来的：<code>typedef short int wchar_t;</code></p><p>所以 <code>wchar_t</code> 实际上的空间是和 <code>short int</code> 一样。</p><h2 id="类型修饰" tabindex="-1">类型修饰 <a class="header-anchor" href="#类型修饰" aria-label="Permalink to &quot;类型修饰&quot;">​</a></h2><p>一些基本类型可以使用一个或多个类型修饰符进行修饰： <code>signed</code> <code>unsigned</code> <code>short</code> <code>long</code></p><h2 id="类型大小" tabindex="-1">类型大小 <a class="header-anchor" href="#类型大小" aria-label="Permalink to &quot;类型大小&quot;">​</a></h2><p>下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一个字节<code>Byte</code>为八个二进制位<code>Bit</code>。</p></div><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">字节 <code>Byte</code></th><th style="text-align:center;">范围</th></tr></thead><tbody><tr><td style="text-align:center;">char</td><td style="text-align:center;">1</td><td style="text-align:center;">-128 到 127 或者 0 到 255</td></tr><tr><td style="text-align:center;">unsigned char</td><td style="text-align:center;">1</td><td style="text-align:center;">0 到 255</td></tr><tr><td style="text-align:center;">signed char</td><td style="text-align:center;">1</td><td style="text-align:center;">-128 到 127</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">4</td><td style="text-align:center;">-2147483648 到 2147483647</td></tr><tr><td style="text-align:center;">unsigned int</td><td style="text-align:center;">4</td><td style="text-align:center;">0 到 4294967295</td></tr><tr><td style="text-align:center;">signed int</td><td style="text-align:center;">4</td><td style="text-align:center;">-2147483648 到 2147483647</td></tr><tr><td style="text-align:center;">short int</td><td style="text-align:center;">2</td><td style="text-align:center;">-32768 到 32767</td></tr><tr><td style="text-align:center;">unsigned short int</td><td style="text-align:center;">2</td><td style="text-align:center;">0 到 65,535</td></tr><tr><td style="text-align:center;">signed short int</td><td style="text-align:center;">2</td><td style="text-align:center;">-32768 到 32767</td></tr><tr><td style="text-align:center;">long int</td><td style="text-align:center;">4</td><td style="text-align:center;">-2147483648 到 2147483647</td></tr><tr><td style="text-align:center;">signed long int</td><td style="text-align:center;">8</td><td style="text-align:center;">-2147483648 到 2147483647</td></tr><tr><td style="text-align:center;">unsigned long int</td><td style="text-align:center;">8</td><td style="text-align:center;">0 到 4294967295</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">4</td><td style="text-align:center;">精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">8</td><td style="text-align:center;">双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td></tr><tr><td style="text-align:center;">long double</td><td style="text-align:center;">16</td><td style="text-align:center;">长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。</td></tr><tr><td style="text-align:center;">wchar_t</td><td style="text-align:center;">2 或 4</td><td style="text-align:center;">1 个宽字符</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>默认情况下，<code>int</code>、<code>short</code>、<code>long</code>都是带符号的，即 <code>signed</code></p><p><code>long int</code> 8 个字节，<code>int</code> 都是 4 个字节，早期的 C 编译器定义了 <code>long int</code> 占用 4 个字节，<code>int</code> 占用 2 个字节，新版的 C/C++ 标准兼容了早期的这一设定（现在的 <code>long int</code> 也是 4 个字节）。不过现在在 16 位里面<code>int</code>是 2 个字节，在 32 位里面是 4 个字节，单纯的<code>int</code>是会随着机器位数而变化的，但是如果加上了限定符<code>long</code> 、<code>short</code>，那么位数就不会变化，可移植性也有很大提升</p></div><p>当然，单单在理论上比较数据大小仍然有点抽象，我们试试看自己写一些代码来展示数据的大小吧。</p><p>你可能并不理解下面代码中<code>cout</code>以及跟在后面的<code>&lt;&lt;</code>符号代表什么意义，不过没关系，目前只用知道它负责向控制台输出数据</p><p>本实例使用了 <code>endl</code>，这将在指定的字符之后插入一个换行符<code>\\n</code></p><p><code>sizeof()</code> 运算用来获取各种数据类型的大小</p><p><code>\\t</code>是制表符，相当于键盘按键<code>Tab</code>，这些具体的格式符号将会在后续介绍</p><div class="language-Cpp"><button title="Copy Code" class="copy"></button><span class="lang">Cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">limits</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 这里使用了 limits 库提供的属性来计算，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    涉及到泛型编程，目前不必知道其基本机理，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    只用知道它能给出传入数据类型的一些属性，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    比如下面我们访问了 max min 等属性，得到 bool 数据类型能接受的最大最小值*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bool 所占字节数：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\t</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">最大值：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">numeric_limits</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#A6ACCD;">max</span><span style="color:#89DDFF;">)()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\t</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">最小值：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">numeric_limits</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">)()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当上面的代码被编译和执行时，它会产生以下的结果</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bool 所占字节数：1      最大值：1       最小值：0</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>试试看，把上面代码里面的所有 <code>bool</code> 改成你想了解的数据类型，比如<code>char int float double</code>，实际操作你的代码，让你印象深刻些，这也是在培养合格程序员所最为重要的实操能力</p></div><h2 id="typedef" tabindex="-1">typedef <a class="header-anchor" href="#typedef" aria-label="Permalink to &quot;typedef&quot;">​</a></h2><p>您可以使用 <code>typedef</code> 为一个已有的类型取一个新的名字。这常用于在结构体编程中使用。</p><p>这是使用 <code>typedef</code> 定义一个新类型的语法：<code>typedef type newname;</code></p><p>例如，下面的语句会告诉编译器，<code>feet</code> 是 <code>int</code> 的另一个名称：<code>typedef int feet;</code></p><p>现在，下面的声明是完全合法的，它创建了一个整型变量 <code>distance：feet distance;</code></p><h2 id="枚举类型" tabindex="-1">枚举类型 <a class="header-anchor" href="#枚举类型" aria-label="Permalink to &quot;枚举类型&quot;">​</a></h2><p>枚举类型(enumeration)是 C++ 中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p><p>如果一个变量只有几种可能的值，可以定义为枚举类型。</p><p>所谓&quot;枚举&quot;是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p><p>创建枚举，需要使用关键字 <code>enum</code>。</p><p>枚举类型的一般形式为：</p><p><code>enum 枚举名 { 标识符[=整型常数], 标识符[=整型常数], ...标识符[=整型常数] } 枚举变量;</code></p><p>如果枚举没有初始化, 即省掉 <code>&quot;=整型常数&quot;</code> 时，则从第一个标识符开始。</p><p>例如，下面的代码定义了一个颜色枚举，变量 <code>c</code> 的类型为 <code>color</code>。最后，<code>c</code> 被赋值为 <code>&quot;blue&quot;</code>。</p><div class="language-Cpp"><button title="Copy Code" class="copy"></button><span class="lang">Cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">green</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> blue</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。</p><p>但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。</p><p>例如，在下面的枚举中，<code>green</code> 的值为 5。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">green</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在这里，<code>blue</code> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 <code>red</code> 的值依然为 0。</p>`,48),o=[a];function p(c,r,d,i,y,D){return e(),s("div",null,o)}const g=t(l,[["render",p]]);export{C as __pageData,g as default};
