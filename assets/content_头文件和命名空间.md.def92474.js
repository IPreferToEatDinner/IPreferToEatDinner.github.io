import{_ as s,o as a,c as n,U as l}from"./chunks/framework.76b79cb5.js";const F=JSON.parse('{"title":"头文件和命名空间","description":"","frontmatter":{},"headers":[],"relativePath":"content/头文件和命名空间.md","filePath":"content/头文件和命名空间.md","lastUpdated":1685109630000}'),o={name:"content/头文件和命名空间.md"},p=l(`<h1 id="头文件和命名空间" tabindex="-1">头文件和命名空间 <a class="header-anchor" href="#头文件和命名空间" aria-label="Permalink to &quot;头文件和命名空间&quot;">​</a></h1><h2 id="历史关系" tabindex="-1">历史关系 <a class="header-anchor" href="#历史关系" aria-label="Permalink to &quot;历史关系&quot;">​</a></h2><p>C++ 是在 C 语言的基础上开发的，早期的 C++ 还不完善，不支持命名空间，没有自己的编译器，而是将 C++ 代码翻译成 C 代码，再通过 C 编译器完成编译。</p><p>这个时候的 C++ 仍然在使用 C 语言的库，<code>stdio.h</code>、<code>stdlib.h</code>、<code>string.h</code> 等头文件依然有效；</p><p>此外 C++ 也开发了一些新的库，增加了自己的头文件，例如：</p><ul><li><code>iostream.h</code>：用于控制台输入输出头文件。</li><li><code>fstream.h</code>：用于文件操作的头文件。</li><li><code>complex.h</code>：用于复数计算的头文件。</li></ul><p>和 C 语言一样，C++ 头文件仍然以<code>.h</code>为后缀，它们所包含的类、函数、宏等都是全局范围的。</p><h2 id="std命名空间" tabindex="-1">std命名空间 <a class="header-anchor" href="#std命名空间" aria-label="Permalink to &quot;std命名空间&quot;">​</a></h2><p>后来 C++ 引入了命名空间的概念，计划重新编写库，将类、函数、宏等都统一纳入一个命名空间，这个命名空间的名字就是<code>std</code>。</p><p><code>std</code>是<code>standard</code>的缩写，意思是“标准命名空间”。</p><p>但是这时已经有很多用老式 C++ 开发的程序了，它们的代码中并没有使用命名空间，直接修改原来的库会带来一个很严重的后果：程序员会因为不愿花费大量时间修改老式代码而极力反抗，拒绝使用新标准的 C++ 代码。</p><p>C++开发人员想了一个好办法，保留原来的库和头文件，它们在 C++ 中可以继续使用，然后再把原来的库复制一份，在此基础上稍加修改，把类、函数、宏等纳入命名空间<code>std</code>下，就成了新版 C++ 标准库。</p><p>这样共存在了两份功能相似的库，使用了老式 C++ 的程序可以继续使用原来的库，新开发的程序可以使用新版的 C++ 库。为了避免头文件重名，新版 C++ 库也对头文件的命名做了调整，去掉了后缀<code>.h</code>，所以老式 C++ 的<code>iostream.h</code>变成了<code>iostream</code>，<code>fstream.h</code>变成了<code>fstream</code>。而对于原来 C 语言的头文件，也采用同样的方法，但在每个名字前还要添加一个<code>c</code>字母，所以 C 语言的<code>stdio.h</code>变成了<code>cstdio</code>，<code>stdlib.h</code>变成了<code>cstdlib</code>。</p><h2 id="现状" tabindex="-1">现状 <a class="header-anchor" href="#现状" aria-label="Permalink to &quot;现状&quot;">​</a></h2><p>需要注意的是，旧的 C++ 头文件是官方所反对使用的，已明确提出不再支持，但旧的 C 头文件仍然可以使用，以保持对 C 的兼容性。实际上，编译器开发商不会停止对客户现有软件提供支持，可以预计，旧的 C++ 头文件在未来数年内还是会被支持。</p><p>下面是 C++ 头文件的现状：</p><ul><li>旧的 C++ 头文件，如<code>iostream.h</code>、<code>fstream.h</code>等将会继续被支持，尽管它们不在官方标准中。这些头文件的内容不在命名空间 <code>std</code> 中。</li><li>新的 C++ 头文件，如<code>iostream</code>、<code>fstream</code> 等包含的基本功能和对应的旧版头文件相似，但头文件的内容在命名空间<code>std</code> 中。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：在标准化的过程中，库中有些部分的细节被修改了，所以旧的头文件和新的头文件不一定完全对应。</p></div><ul><li>标准 C 头文件如<code>stdio.h</code>、<code>stdlib.h</code>等继续被支持。头文件的内容不在<code>std</code>中。</li><li>具有 C 库功能的新 C++ 头文件具有如<code>cstdio</code>、<code>cstdlib</code> 这样的名字。它们提供的内容和相应的旧的 C 头文件相同，只是内容在<code>std</code>中。</li></ul><p>可以发现，对于不带.h的头文件，所有的符号都位于命名空间 std 中，使用时需要声明命名空间 std; s 对于带.h的头文件，没有使用任何命名空间，所有符号都位于全局作用域。这也是 C++ 标准所规定的。</p><p>不过现实情况和 C++ 标准所期望的有些不同，对于原来 C 语言的头文件，即使按照 C++ 的方式来使用，即</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstdio</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这种形式，那么符号可以位于命名空间<code>std</code>中，也可以位于全局范围中，请看下面的两段代码。</p><ul><li>使用命名空间 <code>std</code>：</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstdio</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://iprefertoeatdinner.github.io/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>不使用命名空间 <code>std</code>：</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstdio</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://iprefertoeatdinner.github.io/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这两种形式在 Microsoft Visual C++ 和 GCC 下都能够编译通过，也就是说，大部分编译器在实现时并没有严格遵循C++标准，它们对两种写法都支持，程序员可以使用 <code>std</code> 也可以不使用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>第 1 种写法是标准的，第 2 种不标准，虽然它们在目前的编译器中都没有错误，但我依然推荐使用第 1 种写法，因为标准写法会一直被编译器支持，非标准写法可能会在以后的升级版本中不再支持。</p></div><h2 id="使用c-的头文件" tabindex="-1">使用C++的头文件 <a class="header-anchor" href="#使用c-的头文件" aria-label="Permalink to &quot;使用C++的头文件&quot;">​</a></h2><p>虽然 C++ 几乎完全兼容 C 语言，C语言的头文件在 C++ 中依然被支持，但 C++ 新增的库更加强大和灵活，请读者尽量使用这些 C++ 新增的头文件，例如 <code>iostream</code>、<code>fstream</code>、<code>strin</code>g 等。</p><p>之前我们使用了 C 语言的格式输出函数 <code>printf</code>，引入了 C 语言的头文件 <code>stdio.h</code>，将 C 代码和 C++ 代码混合在了一起，我不推荐这样做，请尽量使用 C++ 的方式。</p><p>下面的例子演示了如何使用 C++ 库进行输入输出：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //声明命名空间std</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //定义字符串变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    string str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //从控制台获取用户输入</span></span>
<span class="line"><span style="color:#A6ACCD;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //将数据输出到控制台</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C++从菜鸟到入门</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-bush"><button title="Copy Code" class="copy"></button><span class="lang">bush</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">还行↙</span></span>
<span class="line"><span style="color:#A6ACCD;">C++从菜鸟到入门还行</span></span></code></pre></div><p>留意<code>using namespace std;</code>，它声明了命名空间<code>std</code>，后续如果有未指定命名空间的符号，那么默认使用<code>std</code>，代码中的 <code>string</code>、<code>cin</code>、<code>cout</code>都位于命名空间<code>std</code>。</p><p>在<code>main()</code>函数中声明命名空间<code>std</code>，它的作用范围就位于<code>main()</code>函数内部，如果在其他函数中又用到了<code>std</code>，就需要重新声明，请看下面的例子：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //必须重新声明</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C++从菜鸟到入门</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //声明命名空间std</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C语言中文网</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果希望在所有函数中都使用命名空间<code>std</code>，可以将它声明在全局范围中，例如</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//声明命名空间std</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C++从菜鸟到入门</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C++从菜鸟到入门</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h2><p>很多教程中都是这样做的，将<code>std</code>直接声明在所有函数外部，这样虽然使用方便，但在中大型项目开发中是不被推荐的，这样做增加了命名冲突的风险，我推荐在函数内部声明<code>std</code>。</p><p>但是为了方便起见，在本教材中，我们依然会使用全局<code>using namespace std;</code>，因为教学只需要用一小段代码而不需要大量库相互调用，所以我们直接使用全局命名空间吧，以后遇到大工程或者自己写库的时候别忘了有这回事就好</p>`,44),e=[p];function t(c,r,i,D,C,y){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{F as __pageData,A as default};
