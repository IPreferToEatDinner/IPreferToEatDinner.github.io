import{_ as s,o as a,c as n,O as p}from"./chunks/framework.4afe7240.js";const A=JSON.parse('{"title":"头文件","description":"","frontmatter":{},"headers":[],"relativePath":"content/头文件.md","filePath":"content/头文件.md","lastUpdated":1685003054000}'),l={name:"content/头文件.md"},o=p(`<h1 id="头文件" tabindex="-1">头文件 <a class="header-anchor" href="#头文件" aria-label="Permalink to &quot;头文件&quot;">​</a></h1><h2 id="什么是头文件-h" tabindex="-1">什么是头文件（.h） <a class="header-anchor" href="#什么是头文件-h" aria-label="Permalink to &quot;什么是头文件（.h）&quot;">​</a></h2><p>头文件是扩展名为<code>.h</code>的文件，与源文件<code>.cpp</code>一样，头文件中也是 C++ 的源代码，头文件中包含了 C++ 中函数、类、对象等的声明和宏定义，它可以被多个源文件通过<code>#include</code>引用共享。</p><h2 id="头文件的价值" tabindex="-1">头文件的价值 <a class="header-anchor" href="#头文件的价值" aria-label="Permalink to &quot;头文件的价值&quot;">​</a></h2><p>一个事物存在，必有其存在的价值和意义，头文件也一样。</p><p>C++中有“单一定义”规则，即“一个对象只能被定义一次”</p><p>如果在一个源文件中定义了一个函数，其他的源文件想要使用这个函数就需要在使用前声明一下这个函数，在编译结束之后，编译器链接的时候再去查找这些函数的定义。</p><p>当只有一两个函数，源文件的数目也不多的时候，我们完全可以直接在源文件中声明这些函数或者变量。但是当我们面临一个大的项目时，几百个函数，非常多的变量，100个源文件。如果每个函数都在每个源文件中声明。那就太麻烦太费事了。</p><p>所以，为了达到在不同的源文件中声明的一致性，为了省去这些繁琐又重复的过程，我们可以把这些对象的声明都放在少数几个文件中，需要用到这些声明的时候再到这些文件中查找，这样的文件，就是头文件。</p><h2 id="头文件的分类" tabindex="-1">头文件的分类 <a class="header-anchor" href="#头文件的分类" aria-label="Permalink to &quot;头文件的分类&quot;">​</a></h2><p>按照来源的不同，有两种类型的头文件：</p><ul><li><p>程序员编写的头文件</p><p>使用方法为<code>&quot;fileName&quot;</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是自己写的头文件.h</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div></li><li><p>标准库（编译器或者其他库的头文件）</p><p>这里使用的符号与自己写的不同，用<code>&lt;fileName&gt;</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ul><h2 id="编译过程中的头文件" tabindex="-1">编译过程中的头文件 <a class="header-anchor" href="#编译过程中的头文件" aria-label="Permalink to &quot;编译过程中的头文件&quot;">​</a></h2><p>C++代码的编译主要通过以下几个过程：</p><p>预编译-&gt;编译-&gt;链接，最后生成可执行文件。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>切记，头文件是不参与编译的，编译器只对源文件进行编译</p></div><p>编译器首先对源文件进行预处理，这一步叫预编译。预编译的时候完成头文件中的宏的处理，并且根据<code>#include</code>指令将头文件展开</p><p>头文件的编译是有要求的，一不小心就会出现不可预料的问题，所以要使用宏声明<a href="./pragma once.html">#pragma once</a></p><p>我们看一个简单的例子，下面是一个头文件<code>CA.h</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你看到的高亮区域是一个头文件必不可少的内容，而上下的<code>ifndef</code>等等实际上是保证头文件不会多次重复声明所建设的保护性机制，其属于宏的知识框架</p></div><p>有两个源文件<code>A.cpp</code>与<code>B.cpp</code>都包含了<code>CA.h</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// A.cpp</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CA.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// B.cpp</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CA.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>经过预编译后，这两个源文件分别变为</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 预编译 A.cpp</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CA_H</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样就实现了在<code>A.cpp</code>与<code>B.cpp</code>中对函数<code>int Fun()</code>的声明。</p><p>在上面的例子中，<code>A.cpp</code>与<code>B.cpp</code>所承担的功能是不一样的，我们在<code>CA.h</code>中声明了<code>Fun</code>函数的存在，但是实际上并没有对<code>Fun</code>函数的实现进行任何的描述，所以在<code>A.cpp</code>中，我们在函数<code>Fun</code>声明之后实现了函数<code>Fun</code>的定义，在此时<code>Fun</code>函数才有明确的指向位置。</p><p>之后在<code>B.cpp</code>中，我们将已经链接完毕的<code>Fun</code>函数给到<code>Fun1</code>函数，此处给一个函数声明即可，编译器会自己把<code>Fun</code>函数运行本体链接上<code>Fun1</code>函数</p><h2 id="建议" tabindex="-1">建议 <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议&quot;">​</a></h2><p>使用基本的头文件命名格式，<code>文件名</code>和文件内的<code>函数名</code>一致</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你学习了面向对象，那么下面的建议会对你有很大帮助</p></div><p>一个类使用一个头文件，每个头文件仅仅有一个类的声明</p><p>将一个类对应的源代码命名成头文件的格式</p>`,35),e=[o];function c(t,i,r,d,y,F){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{A as __pageData,C as default};
